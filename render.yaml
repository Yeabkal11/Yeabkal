# render.yaml - FINAL RELIABLE VERSION

services:
  - type: web
    name: yeab-game-zone-api
    env: python
    plan: starter
    region: frankfurt
    buildCommand: "pip install -r requirements.txt && python main.py initdb"
    # The start command is now much simpler and more reliable.
    startCommand: "python main.py"
    healthCheckPath: /health
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: yeab-ludo-db
          property: connectionString
      - key: TELEGRAM_BOT_TOKEN
        sync: false
      - key: CHAPA_API_KEY
        sync: false
      - key: WEBHOOK_URL
        fromService:
          type: web
          name: yeab-game-zone-api
          property: url

  - type: pserv
    name: yeab-ludo-db
    region: frankfurt
    databaseName: yeab_game_db
    databaseUser: yeab_user
    plan: free

  - type: worker
    name: yeab-game-forfeit-worker
    env: python
    plan: starter
    region: frankfurt
    buildCommand: "pip install -r requirements.txt"
    startCommand: "python -m bot.worker"
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: yeab-ludo-db
          property: connectionString
      - key: TELEGRAM_BOT_TOKEN
        sync: false```

**Step 3: Commit and Deploy**

Commit both file changes on GitHub. A new deployment will start.

This time, the process is foolproof. Your `startCommand` simply runs `python main.py`. That script then takes over, reads the environment variables itself, and starts the web server on the exact host and port Render needs. There is no room for misinterpretation.

This is the most reliable method for deploying a Python web app on Render. I am very confident this will resolve the port binding issue and your service will finally go live.